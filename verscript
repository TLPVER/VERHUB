local WindUI = require("./src/init")-- Test-- Set theme:--WindUI:SetTheme("Light")--- EXAMPLE !!!function gradient(text, startColor, endColor)    local result = ""    local length = #text    for i = 1, length do        local t = (i - 1) / math.max(length - 1, 1)        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)        local char = text:sub(i, i)        result = result .. "<font color=\"rgb(" .. r ..", " .. g .. ", " .. b .. ")\">" .. char .. "</font>"    end    return resultendlocal Confirmed = falseWindUI:Popup({    Title = "Welcome! Popup Example",    Icon = "rbxassetid://129260712070622",    IconThemed = true,    Content = "This is an Example UI for the " .. gradient("WindUI", Color3.fromHex("#00FF87"), Color3.fromHex("#60EFFF")) .. " Lib",    Buttons = {        {            Title = "Cancel",            --Icon = "",            Callback = function() end,            Variant = "Secondary", -- Primary, Secondary, Tertiary        },        {            Title = "Continue",            Icon = "arrow-right",            Callback = function() Confirmed = true end,            Variant = "Primary", -- Primary, Secondary, Tertiary        }    }})repeat wait() until Confirmed--local Window = WindUI:CreateWindow({    Title = "WindUI Library",    Icon = "rbxassetid://129260712070622",    IconThemed = true,    Author = "Example UI",    Folder = "CloudHub",    Size = UDim2.fromOffset(580, 460),    Transparent = true,    Theme = "Dark",    User = {        Enabled = true, -- <- or false        Callback = function() print("clicked") end, -- <- optional        Anonymous = true -- <- or true    },    SideBarWidth = 200,    -- HideSearchBar = true, -- hides searchbar    ScrollBarEnabled = true, -- enables scrollbar    -- Background = "rbxassetid://13511292247", -- rbxassetid only    -- remove it below if you don't want to use the key system in your script.    KeySystem = { -- <- keysystem enabled        Key = { "1234", "5678" },        Note = "Example Key System. \n\nThe Key is '1234' or '5678",        -- Thumbnail = {        --     Image = "rbxassetid://18220445082", -- rbxassetid only        --     Title = "Thumbnail"        -- },        URL = "https://github.com/Footagesus/WindUI", -- remove this if the key is not obtained from the link.        SaveKey = true, -- optional    },})-- Window:SetBackgroundImage("rbxassetid://13511292247")-- Window:SetBackgroundImageTransparency(0.9)-- TopBar Edit-- Disable Topbar Buttons-- Window:DisableTopbarButtons({--     "Close", --     "Minimize", --     "Fullscreen",-- })-- Create Custom Topbar Buttons--                        ↓ Name             ↓ Icon          ↓ Callback                           ↓ LayoutOrderWindow:CreateTopbarButton("MyCustomButton1", "bird",         function() print("clicked 1!") end,  990)Window:CreateTopbarButton("MyCustomButton2", "droplet-off",  function() print("clicked 2!") end,  989)Window:CreateTopbarButton("MyCustomButton3", "battery-plus", function() print("clicked 3!!") end, 988)Window:EditOpenButton({    Title = "Open Example UI",    Icon = "monitor",    CornerRadius = UDim.new(0,16),    StrokeThickness = 2,    Color = ColorSequence.new( -- gradient        Color3.fromHex("FF0F7B"),         Color3.fromHex("F89B29")    ),    --Enabled = false,    Draggable = true,})local Tabs = {    ParagraphTab = Window:Tab({ Title = "Paragraph", Icon = "type" }),    ButtonTab = Window:Tab({ Title = "Button", Icon = "mouse-pointer-2", Desc = "Contains interactive buttons for various actions." }),    CodeTab = Window:Tab({ Title = "Code", Icon = "code", Desc = "Displays and manages code snippets." }),    ColorPickerTab = Window:Tab({ Title = "ColorPicker", Icon = "paintbrush", Desc = "Choose and customize colors easily." }),    DialogTab = Window:Tab({ Title = "Dialog", Icon = "message-square", Desc = "Dialog lol" }),    NotificationTab = Window:Tab({ Title = "Notification", Icon = "bell", Desc = "Configure and view notifications." }),    ToggleTab = Window:Tab({ Title = "Toggle", Icon = "toggle-left", Desc = "Switch settings on and off." }),    SliderTab = Window:Tab({ Title = "Slider", Icon = "sliders-horizontal", Desc = "Adjust values smoothly with sliders." }),    InputTab = Window:Tab({ Title = "Input", Icon = "keyboard", Desc = "Accept text and numerical input." }),    KeybindTab = Window:Tab({ Title = "Keybind", Icon = "keyboard-off" }),    DropdownTab = Window:Tab({ Title = "Dropdown", Icon = "chevrons-up-down", Desc = "Select from multiple options." }),    divider1 = Window:Divider(),    --    WindowTab = Window:Tab({         Title = "Window and File Configuration",         Icon = "settings",         Desc = "Manage window settings and file configurations.",         ShowTabTitle = true    }),    CreateThemeTab = Window:Tab({ Title = "Create Theme", Icon = "palette", Desc = "Design and apply custom themes." }),    be = Window:Divider(),    LongTab = Window:Tab({        Title = "Long and empty tab. with custom icon",         Icon = "rbxassetid://129260712070622", -- vector icon (like lucide) in white color         IconThemed = true,         Desc = "Long Description"     }),    LockedTab = Window:Tab({ Title = "Locked Tab", Icon = "lock", Desc = "This tab is locked", Locked = true }),    TabWithoutIcon = Window:Tab({ Title = "Tab Without icon", ShowTabTitle = true }),    Tests = Window:Tab({ Title = "Tests", Icon = "https://raw.githubusercontent.com/Footagesus/WindUI/main/docs/ui.png", ShowTabTitle = true }),    ConfigTab = Window:Tab({ Title = "Config", Icon = "file-cog" }),}Window:SelectTab(1)Tabs.ParagraphTab:Paragraph({    Title = "Paragraph with Image & Thumbnail",    Desc = "Test Paragraph",    Image = "https://play-lh.googleusercontent.com/7cIIPlWm4m7AGqVpEsIfyL-HW4cQla4ucXnfalMft1TMIYQIlf2vqgmthlZgbNAQoaQ",    ImageSize = 42, -- default 30    Thumbnail = "https://tr.rbxcdn.com/180DAY-59af3523ad8898216dbe1043788837bf/768/432/Image/Webp/noFilter",    ThumbnailSize = 120 -- Thumbnail height})Tabs.ParagraphTab:Paragraph({    Title = "Paragraph with Image & Thumbnail & Buttons",    Desc = "Test Paragraph",    Image = "https://play-lh.googleusercontent.com/7cIIPlWm4m7AGqVpEsIfyL-HW4cQla4ucXnfalMft1TMIYQIlf2vqgmthlZgbNAQoaQ",    ImageSize = 42, -- default 30    Thumbnail = "https://tr.rbxcdn.com/180DAY-59af3523ad8898216dbe1043788837bf/768/432/Image/Webp/noFilter",    ThumbnailSize = 120, -- Thumbnail height    Buttons = {        {            Title = "Button 1",            Variant = "Primary",            Callback = function() print("1 Button") end,            Icon = "bird",        },        {            Title = "Button 2",            Variant = "Primary",            Callback = function() print("2 Button") end,            Icon = "bird",        },        {            Title = "Button 3",            Variant = "Primary",            Callback = function() print("3 Button") end,            Icon = "bird",        },    }})Tabs.ParagraphTab:Divider()for _,i in next, { "Default", "Red", "Orange", "Green", "Blue", "Grey", "White" } do    Tabs.ParagraphTab:Paragraph({        Title = i,        Desc = "Paragraph with color",        Image = "bird",        Color = i ~= "Default" and i or nil,        Buttons = {            {                Title = "Button 1",                Variant = "Primary",                Callback = function() print("1 Button") end,                Icon = "bird",            },            {                Title = "Button 2",                Variant = "Primary",                Callback = function() print("2 Button") end,                Icon = "bird",            },            {                Title = "Button 3",                Variant = "Primary",                Callback = function() print("3 Button") end,                Icon = "bird",            },        }    })endTabs.ButtonTab:Button({    Title = "Click Me",    Desc = "This is a simple button",    Callback = function() print("Button Clicked!") end})local destroybtndestroybtn = Tabs.ButtonTab:Button({    Title = "Click to destroy me!",    Callback = function() destroybtn:Destroy() end,})Tabs.ButtonTab:Button({    Title = "Submit",    Desc = "Click to submit",    Callback = function() print("Submitted!") end,})Tabs.ButtonTab:Button({    Title = "Set ToggleKey to 'F'",    Callback = function() Window:SetToggleKey(Enum.KeyCode.F) end,})Tabs.ButtonTab:Divider()Tabs.ButtonTab:Button({    Title = "Locked Button",    Desc = "This button is locked",    Locked = true,})Tabs.CodeTab:Code({    Title = "example-code.luau",    Code = [[-- Example Luau code to test syntax highlightinglocal Players = game:GetService("Players")local HttpService = game:GetService("HttpService")local function factorial(n)    if n <= 1 then        return 1    else        return n * factorial(n - 1)    endendlocal result = factorial(5)print("Factorial of 5 is:", result)local playerName = "Player"local score = 100if score >= 100 then    print(playerName .. " earned an achievement!")else    warn("Need more points.")end-- Table with nested valueslocal playerStats = {    name = "Player",    health = 100,    inventory = {"sword", "shield", "potion"}}for i, item in ipairs(playerStats.inventory) do    print("Item in inventory:", item)end]],})Tabs.CodeTab:Code({    Code = [[print("WindUI on top!")]],})Tabs.ColorPickerTab:Colorpicker({    Title = "Pick a Color",    Default = Color3.fromRGB(255, 0, 0),    Callback = function(color) print("Selected color: " .. tostring(color)) end})Tabs.ColorPickerTab:Colorpicker({    Title = "Transparency Color",    Default = Color3.fromRGB(0, 0, 255),    Transparency = 0,    Callback = function(color) print("Background color: " .. tostring(color)) end})Tabs.DialogTab:Button({    Title = "Create Example Dialog",    Callback = function()        Window:b({            Title = "Example Dialog",            Content = "Example Content. lalala",            Icon = "bird",            Buttons = {                {                    Title = "LOL!",                    Icon = "bird",                    Variant = "Tertiary",                    Callback = function()                        print("lol")                    end,                },                {                    Title = "Cool!",                    Icon = "bird",                    Variant = "Tertiary",                    Callback = function()                        print("Cool")                    end,                },                {                    Title = "Ok!",                    Icon = "bird",                    Variant = "Secondary",                    Callback = function()                        print("Ok")                    end,                },                {                    Title = "Awesome!",                    Icon = "bird",                    Variant = "Primary",                    Callback = function()                         print("Awesome")                    end,                }            }        })    end,})Tabs.DialogTab:Button({    Title = "Create Example Dialog 2",    Callback = function()        Window:Dialog({            Title = "Example Dialog 2",            Content = "Example Content. lalala",            Icon = "rbxassetid://129260712070622",            Buttons = {                {                    Title = "Ok!",                    Variant = "Primary",                    Callback = function()                        print("ok")                    end,                },            }        })    end,})Tabs.NotificationTab:Button({    Title = "Click to get Notified",    Callback = function()         WindUI:Notify({            Title = "Notification Example 1",            Content = "Content",            Duration = 5,        })    end})Tabs.NotificationTab:Button({    Title = "Notification with icon",    Callback = function()         WindUI:Notify({            Title = "Notification Example 2",            Content = "Content",            Icon = "droplet-off",            Duration = 5,        })    end})Tabs.NotificationTab:Button({    Title = "Notification with custom icon",    Callback = function()         WindUI:Notify({            Title = "Notification Example 2",            Content = "Content",            Icon = "rbxassetid://129260712070622",            IconThemed = true, -- automatic color icon to theme             Duration = 5,        })    end})Tabs.NotificationTab:Button({    Title = "Notification with BackgroundImage",    Callback = function()         WindUI:Notify({            Title = "Notification Example 3",            Content = "with BackgroundImage",            Icon = "image",            Duration = 5,            Background = "rbxassetid://13511292247"        })    end})Tabs.ToggleTab:Toggle({    Title = "Enable Feature",    --Image = "bird",    Value = true,    Callback = function(state) print("Feature enabled: " .. tostring(state)) end})Tabs.ToggleTab:Toggle({    Title = "Activate Mode",    Value = false,    Callback = function(state) print("Mode activated: " .. tostring(state)) end})Tabs.ToggleTab:Toggle({    Title = "Toggle with icon",    Icon = "check",    Value = false,    Callback = function(state) print("Toggle with icon activated: " .. tostring(state)) end})Tabs.ToggleTab:Toggle({    Title = "New Toggle Type 'Checkbox'",    Type = "Checkbox",    Value = false,    Callback = function(state) print("'Checkbox' Toggle activated: " .. tostring(state)) end})Tabs.ToggleTab:Toggle({    Title = "New Toggle Type 'Checkbox' with custom icon",    Icon = "bird",    Type = "Checkbox",    Value = false,    Callback = function(state) print("'Checkbox' Toggle with icon activated: " .. tostring(state)) end})Tabs.SliderTab:Slider({    Title = "Volume Slider",    Value = {        Min = 0,        Max = 100,        Default = 50,    },    Callback = function(value) print("Volume set to: " .. value) end})Tabs.SliderTab:Slider({    Title = "Brightness Slider",    Value = {        Min = 1,        Max = 100,        Default = 75,    },    Callback = function(value) print("Brightness set to: " .. value) end})Tabs.SliderTab:Slider({    Title = "Float Slider",    Step = 0.1,    Value = {        Min = 0,        Max = 2.5,        Default = 1.5,    },    Callback = function(value) print("Brightness set to: " .. value) end})Tabs.InputTab:Input({    Title = "Username",    Value = "Guest",    Placeholder = "Enter your username",    Callback = function(input) print("Username: " .. input) end})Tabs.InputTab:Input({    Title = "Password",    Value = "",    Placeholder = "Enter your password",    Callback = function(input) print("Password entered.") end})Tabs.InputTab:Input({    Title = "Input with icon",    Value = "pisun",    InputIcon = "bird",    Placeholder = "Enter pisun",    Callback = function(input) print("pisun entered.") end})Tabs.InputTab:Input({    Title = "Comment",    Value = "",    Type = "Textarea", -- or Input    Placeholder = "Leave a comment",    Callback = function(input)         print("Comment entered: " .. input)    end})Tabs.InputTab:Input({    Title = "Comment with icon",    Desc = "hmmmm",    Value = "pisun",    InputIcon = "bird",    Type = "Textarea", -- or Input    Placeholder = "Leave a pisun",    Callback = function(input)         print("Pisun entered: " .. input)    end})Tabs.KeybindTab:Keybind({    Title = "Keybind Example",    Desc = "Keybind to open ui",    Value = "G",    Callback = function(v)        Window:SetToggleKey(Enum.KeyCode[v])    end})Tabs.DropdownTab:Dropdown({    Title = "Select an Option",    Values = { "Option 1", "Option 2", "Option 3" },    Value = "Option 1",    Callback = function(option) print("Selected: " .. option) end})Tabs.DropdownTab:Dropdown({    Title = "Choose a Category (Multi)",    Values = { "Category A", "Category B", "Category C" },    Value = { "Category A" },    Multi = true,    AllowNone = true,    Callback = function(option)         print("Categories selected: " .. game:GetService("HttpService"):JSONEncode(option))     end})-- Configuration-- Optionallocal HttpService = game:GetService("HttpService")local folderPath = "WindUI"makefolder(folderPath)local function SaveFile(fileName, data)    local filePath = folderPath .. "/" .. fileName .. ".json"    local jsonData = HttpService:JSONEncode(data)    writefile(filePath, jsonData)endlocal function LoadFile(fileName)    local filePath = folderPath .. "/" .. fileName .. ".json"    if isfile(filePath) then        local jsonData = readfile(filePath)        return HttpService:JSONDecode(jsonData)    endendlocal function ListFiles()    local files = {}    for _, file in ipairs(listfiles(folderPath)) do        local fileName = file:match("([^/]+)%.json$")        if fileName then            table.insert(files, fileName)        end    end    return filesendTabs.WindowTab:Section({ Title = "Window", Icon = "app-window-mac" })local themeValues = {}for name, _ in pairs(WindUI:GetThemes()) do    table.insert(themeValues, name)endlocal themeDropdown = Tabs.WindowTab:Dropdown({    Title = "Select Theme",    Multi = false,    AllowNone = false,    Value = nil,    Values = themeValues,    Callback = function(theme)        WindUI:SetTheme(theme)    end})themeDropdown:Select(WindUI:GetCurrentTheme())local ToggleTransparency = Tabs.WindowTab:Toggle({    Title = "Toggle Window Transparency",    Callback = function(e)        Window:ToggleTransparency(e)    end,    Value = WindUI:GetTransparency()})Tabs.WindowTab:Section({ Title = "Save" })local fileNameInput = ""Tabs.WindowTab:Input({    Title = "Write File Name",    PlaceholderText = "Enter file name",    Callback = function(text)        fileNameInput = text    end})Tabs.WindowTab:Button({    Title = "Save File",    Callback = function()        if fileNameInput ~= "" then            SaveFile(fileNameInput, { Transparent = WindUI:GetTransparency(), Theme = WindUI:GetCurrentTheme() })        end    end})Tabs.WindowTab:Section({ Title = "Load" })local filesDropdownlocal files = ListFiles()filesDropdown = Tabs.WindowTab:Dropdown({    Title = "Select File",    Multi = false,    AllowNone = true,    Values = files,    Callback = function(selectedFile)        fileNameInput = selectedFile    end})Tabs.WindowTab:Button({    Title = "Load File",    Callback = function()        if fileNameInput ~= "" then            local data = LoadFile(fileNameInput)            if data then                WindUI:Notify({                    Title = "File Loaded",                    Content = "Loaded data: " .. HttpService:JSONEncode(data),                    Duration = 5,                })                if data.Transparent then                     Window:ToggleTransparency(data.Transparent)                    ToggleTransparency:SetValue(data.Transparent)                end                if data.Theme then WindUI:SetTheme(data.Theme) end            end        end    end})Tabs.WindowTab:Button({    Title = "Overwrite File",    Callback = function()        if fileNameInput ~= "" then            SaveFile(fileNameInput, { Transparent = WindUI:GetTransparency(), Theme = WindUI:GetCurrentTheme() })        end    end})Tabs.WindowTab:Button({    Title = "Refresh List",    Callback = function()        filesDropdown:Refresh(ListFiles())    end})local currentThemeName = WindUI:GetCurrentTheme()local themes = WindUI:GetThemes()local ThemeAccent = themes[currentThemeName].Accentlocal ThemeOutline = themes[currentThemeName].Outlinelocal ThemeText = themes[currentThemeName].Textlocal ThemePlaceholderText = themes[currentThemeName].Placeholderfunction updateTheme()    WindUI:AddTheme({        Name = currentThemeName,        Accent = ThemeAccent,        Outline = ThemeOutline,        Text = ThemeText,        Placeholder = ThemePlaceholderText    })    WindUI:SetTheme(currentThemeName)endlocal CreateInput = Tabs.CreateThemeTab:Input({    Title = "Theme Name",    Value = currentThemeName,    Callback = function(name)        currentThemeName = name    end})Tabs.CreateThemeTab:Colorpicker({    Title = "Background Color",    Default = Color3.fromHex(ThemeAccent),    Callback = function(color)        ThemeAccent = color:ToHex()    end})Tabs.CreateThemeTab:Colorpicker({    Title = "Outline Color",    Default = Color3.fromHex(ThemeOutline),    Callback = function(color)        ThemeOutline = color:ToHex()    end})Tabs.CreateThemeTab:Colorpicker({    Title = "Text Color",    Default = Color3.fromHex(ThemeText),    Callback = function(color)        ThemeText = color:ToHex()    end})Tabs.CreateThemeTab:Colorpicker({    Title = "Placeholder Text Color",    Default = Color3.fromHex(ThemePlaceholderText),    Callback = function(color)        ThemePlaceholderText = color:ToHex()    end})Tabs.CreateThemeTab:Button({    Title = "Update Theme",    Callback = function()        updateTheme()    end})local InviteCode = "ApbHXtAwU2"local DiscordAPI = "https://discord.com/api/v10/invites/" .. InviteCode .. "?with_counts=true&with_expiration=true"local Response = game:GetService("HttpService"):JSONDecode(WindUI.Creator.Request({    Url = DiscordAPI,    Method = "GET",    Headers = {        ["User-Agent"] = "RobloxBot/1.0",        ["Accept"] = "application/json"    }}).Body)if Response and Response.guild then    local DiscordInfo = Tabs.Tests:Paragraph({        Title = Response.guild.name,        Desc =             ' <font color="#52525b">•</font> Member Count : ' .. tostring(Response.approximate_member_count) ..             '\n <font color="#16a34a">•</font> Online Count : ' .. tostring(Response.approximate_presence_count)        ,        Image = "https://cdn.discordapp.com/icons/" .. Response.guild.id .. "/" .. Response.guild.icon .. ".png?size=1024",        ImageSize = 42,    })    Tabs.Tests:Button({        Title = "Update Info",        --Image = "refresh-ccw",        Callback = function()            local UpdatedResponse = game:GetService("HttpService"):JSONDecode(WindUI.Creator.Request({                Url = DiscordAPI,                Method = "GET",            }).Body)                        if UpdatedResponse and UpdatedResponse and UpdatedResponse.guild then                DiscordInfo:SetDesc(                    ' <font color="#52525b">•</font> Member Count : ' .. tostring(UpdatedResponse.approximate_member_count) ..                     '\n <font color="#16a34a">•</font> Online Count : ' .. tostring(UpdatedResponse.approximate_presence_count)                )            end        end    })else    Tabs.Tests:Paragraph({        Title = "Error when receiving information about the Discord server",        Desc = game:GetService("HttpService"):JSONEncode(Response),        Image = "triangle-alert",        ImageSize = 26,        Color = "Red",    })endlocal function parseJSON(luau_table, indent, level, visited)    indent = indent or 2    level = level or 0    visited = visited or {}        local currentIndent = string.rep(" ", level * indent)    local nextIndent = string.rep(" ", (level + 1) * indent)        if luau_table == nil then        return "null"    end        local dataType = type(luau_table)        if dataType == "table" then        if visited[luau_table] then            return "\"[Circular Reference]\""        end                visited[luau_table] = true                local isArray = true        local maxIndex = 0                for k, _ in pairs(luau_table) do            if type(k) == "number" and k > maxIndex then                maxIndex = k            end            if type(k) ~= "number" or k <= 0 or math.floor(k) ~= k then                isArray = false                break            end        end                local count = 0        for _ in pairs(luau_table) do            count = count + 1        end        if count ~= maxIndex and isArray then            isArray = false        end                if count == 0 then            return "{}"        end                if isArray then            if count == 0 then                return "[]"            end                        local result = "[\n"                        for i = 1, maxIndex do                result = result .. nextIndent .. parseJSON(luau_table[i], indent, level + 1, visited)                if i < maxIndex then                    result = result .. ","                end                result = result .. "\n"            end                        result = result .. currentIndent .. "]"            return result        else            local result = "{\n"            local first = true                        local keys = {}            for k in pairs(luau_table) do        结果=结果。。"<fontcolor=\"rgb(".。r。。“，”。。g。。“，”。。b。。")\">"。。烧焦。。"</font>"结束返回结果endlocal Confirmed=falseWindowUI：弹出窗口({Title="欢迎！弹出窗口示例"，icon="rbxassetid://129260712070622"，IconThemed=true，Content="这是“..渐变”(“WindUI”，颜色3.来自十六进制("#00FF87")，颜色3.从……起的UI示例十六进制("#60EFFF").."Lib"，按钮={{Title="取消"，--图标=""，回调=函数()结束，变体="二级"，--一级，二级，三级}，{Title="继续"，图标="向右箭头"，回调=函数()确认=真实结束，variant="Primary"，--Primary，S二级、三级}}})重复等待()直到确认--本地窗口=WindUI：创建窗口({Title="WindUI库"，icon="rbxassetid://129260712070622结果如果dataTy PE=="string"，则以else结尾则本地转义=luau_table:gsub("\\"，"\\\")转义=锿"\""否则，如果datatype=="number"则返回到字符串(luau_table)elseI本地ToggleElement=Tabs.ConfigTab：切换({Title="切换"，说明下表""，数值={"Te本地WindUI=require("./src/init")--测试--设置主题：--WindUI：设置主题(“轻”)--示例！！函数渐变(文本、开始颜色、结束颜色)局部结果=""局部长度=#text为I=1，长度do局部t=(i-1)/math.Max(长度-1，1)局部R=数学.floor((startColor.R+(endCol="获取WindUI JSON"})选项卡.测试：按钮({Tior.R)*t)*255)局部g=math.floor((startColor.g+(endColor.g-startColor.g)*t)*255)局部b=math.floor((startColor.B+(endColor.B-startColor。B)*t)*255)本地char=文本：TLE="获取WindUI JSON"，回调=function()tableToClipboard(WindUI)end})--Configs=aceholder="Enter text......."，Callback=函数(v)打印("Input改变："。.v)end})本地ColorpickerElement=选项卡。ConfigTab:colorpicker({Title="colorpicker"，Desc="配置测试colorpicker"，默认为Color3.FromHex("#315dff")，透明ncy=0，--启用了透明度的回调=函数(c，t)打印("颜色选择器已更改："..C:TOXEX().."\n透明度："..T)结束})--配置--1。加载ConfigManager本地ConfigManager=窗口。ConfigManager-2.创建配置文件↓配置文件名称本地myconfig=ConfigManager：创建config("myconfig")--3.寄存器元素--|↓元素名称(无空格)|↓元素|myconfig:Register("toggleNameExample"，ToggleElement)myconfig：寄存器("sliderNameExample""，SliderElement)myconfig：寄存器("keybindNameExample"，KeybindElement)myconfig:register("dropdownNameExample"，DropdownElement)myconfig:register("inputNameExample"，InputElement)myconfig：寄存器("Colo[rpickerNameExample""，ColorpickerElement)--保存--)
